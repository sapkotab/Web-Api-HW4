{
	"id": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
	"name": "hw4",
	"description": "",
	"order": [
		"1ed2bd8c-5073-92b5-a36d-fbc51f46b378",
		"a80052ae-ff51-7730-a4fd-4636ef09a3df",
		"c0de7cb2-68ee-83e6-627e-e24e2c43d905",
		"6b2eea34-917b-7d9e-c2e0-d383f2f48a3d",
		"f1b2dba3-65f1-8b2d-1960-f033d110d33d",
		"b58013f4-2e92-84b0-8784-0ba1a4b37f88",
		"28c69665-21c3-6b9a-3e22-223892a85445",
		"9b9030df-1761-e7ad-331a-95c38543fd29",
		"8abe1451-940f-9681-cd6d-27a80855d3aa",
		"88d1ad72-4bc3-78c3-7fb2-1f5195ad17ea",
		"53cb7ac8-8def-8a73-f5f4-d8e0c57a59ec",
		"893cb3fb-341e-aaab-a709-5833ad096fa6",
		"fee63c09-c950-1709-d903-3de1856add83"
	],
	"folders": [],
	"timestamp": 1491247044752,
	"owner": "1497785",
	"public": false,
	"requests": [
		{
			"id": "1ed2bd8c-5073-92b5-a36d-fbc51f46b378",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "GET",
			"data": null,
			"dataMode": "params",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar schema = \n{\"object\":{\n    \"type\": \"array\",\n    \"items\": {\n        \"$ref\": \"#/definitions/MyObject\"\n    },\n\n    \"definitions\": {\n        \"MyObject\": {\n            \"type\": \"object\",\n            \"required\": [\"Title\", \"YearReleased\", \"Actors\"],\n            \"properties\": {\n                \"Title\": {\n                    \"type\": \"string\"\n                },\n                \"YearReleased\": {\n                    \"type\": \"number\"\n                },\n                \"Actors\": {\n                    \"type\": \"object\"\n                },\n            },\n            \"additionalProperties\": false\n        }\n    }\n}\n};\n\nvar jsonData = JSON.parse(responseBody);\nvar result = tv4.validateResult(data, schema);\ntests[\"Valid schema\"] = result.valid;",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491276701223,
			"name": "get with GET",
			"description": "get operation should show all movies in database. and schema validation test shoud pass.",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": []
		},
		{
			"id": "28c69665-21c3-6b9a-3e22-223892a85445",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{AddedMovieTitle}}",
			"preRequestScript": "postman.setGlobalVariable(\"AddedMovieTitle\", \"Zootopia\");",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Title matched\"] = jsonData.movie[0].Title.has(\"Zootopia\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491277500394,
			"name": "get with valid title",
			"description": "only titled movie should show up in body. we test the title is correct.",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "53cb7ac8-8def-8a73-f5f4-d8e0c57a59ec",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{AddedMovieTitle}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 405\"] = responseCode.code === 405;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491278499158,
			"name": "Post  with title alredy exist",
			"description": "should return error ",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "6b2eea34-917b-7d9e-c2e0-d383f2f48a3d",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "POST",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"data": null,
			"dataMode": "params",
			"name": "post without body",
			"description": "shold return as a bad request",
			"descriptionFormat": "html",
			"time": 1491277047569,
			"version": 2,
			"responses": [],
			"tests": "tests[\"bad request\"] = responseCode.code === 400;",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "88d1ad72-4bc3-78c3-7fb2-1f5195ad17ea",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{AddedMovieTitle}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "PUT",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"data": [],
			"dataMode": "raw",
			"name": "put with only array of actors",
			"description": "should update only array of actors. ",
			"descriptionFormat": "html",
			"time": 1491278324710,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\ntests[\"success message\"] = responseBody.has(\"Movie is updated\");\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"rawModeData": "{\n    \"Actors\": [\n        {\n            \"Name\": \"Bhuwan Sapkota\"\n        },\n        {\n            \"Name\": \"Christi mainali\"\n        },\n        {\n            \"Name\": \"Maya Baral\"\n        }\n    ]\n}"
		},
		{
			"id": "893cb3fb-341e-aaab-a709-5833ad096fa6",
			"headers": "Content-Type: application/x-www-form-urlencoded\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{AddedMovieTitle}}",
			"pathVariables": {},
			"preRequestScript": null,
			"method": "DELETE",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"data": [],
			"dataMode": "urlencoded",
			"name": "delete movie with title",
			"description": "should delete movie from database",
			"descriptionFormat": "html",
			"time": 1491278802250,
			"version": 2,
			"responses": [],
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"Movie successfully deleted\");",
			"currentHelper": "normal",
			"helperAttributes": {}
		},
		{
			"id": "8abe1451-940f-9681-cd6d-27a80855d3aa",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{AddedMovieTitle}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\nvar jsonData = JSON.parse(responseBody);\ntests[\"success message\"] = responseBody.has(\"Movie is updated\");\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491278150660,
			"name": "put with only year change",
			"description": "should update only year. ",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": "{\n    \"YearReleased\": 2000\n}"
		},
		{
			"id": "9b9030df-1761-e7ad-331a-95c38543fd29",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{invalidMovieTitle}}",
			"preRequestScript": "postman.setGlobalVariable(\"invalidMovieTitle\", \"invalidMovie\");",
			"pathVariables": {},
			"method": "GET",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\n\nvar jsonData = JSON.parse(responseBody);\ntests[\"Title matched\"] = jsonData.message.has(\"No such movie is found\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491277506006,
			"name": "get with invalid title",
			"description": "only titled movie should show up in body. we test the title is correct.",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "a80052ae-ff51-7730-a4fd-4636ef09a3df",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"successfully added\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491277210584,
			"name": "post with valid body",
			"description": "post operation should save movie in database. success test should pass. we will validate this movie actually exist in database by get by Title operation.",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": "{\n    \"Title\": \"Zootopia\",\n    \"YearReleased\": 2016,\n    \"Actors\": [\n        {\n            \"Name\": \"Ginnifer Goodwin\"\n        },\n        {\n            \"Name\": \"Jason Bateman\"\n        },\n        {\n            \"Name\": \"Idris Elba\"\n        }\n    ]\n}"
		},
		{
			"id": "b58013f4-2e92-84b0-8784-0ba1a4b37f88",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 405\"] = responseCode.code === 405;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491277335667,
			"name": "bulk delete",
			"description": "put shouldn't be allowed withoug Title specification",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "c0de7cb2-68ee-83e6-627e-e24e2c43d905",
			"headers": "Content-Type: application/json\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "POST",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"alredy exist message\"] = responseBody.has(\"Movie already exist\");\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491276935335,
			"name": "post with existing movie",
			"description": "post operation should display movie already exist to user. movie exist test should pass",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": "{\n  \"Title\": \"Zootopia\",\n  \"YearReleased\": 2016,\n  \"Actors\": [\n        {\n          \"Name\": \"Ginnifer Goodwin\"\n        },\n        {\n          \"Name\": \"Jason Bateman\"\n        },\n        {\n          \"Name\": \"Idris Elba\"\n        }\n\t]\n}"
		},
		{
			"id": "f1b2dba3-65f1-8b2d-1960-f033d110d33d",
			"headers": "",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "PUT",
			"data": [],
			"dataMode": "raw",
			"version": 2,
			"tests": "tests[\"Status code is 405\"] = responseCode.code === 405;\n\n\n",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491277328482,
			"name": "bulk put with PUT",
			"description": "put shouldn't be allowed withoug Title specification",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": [],
			"rawModeData": ""
		},
		{
			"id": "fee63c09-c950-1709-d903-3de1856add83",
			"headers": "Content-Type: application/x-www-form-urlencoded\n",
			"url": "http://brsapkota-test.apigee.net/movieCollection/movie/{{AddedMovieTitle}}",
			"preRequestScript": null,
			"pathVariables": {},
			"method": "DELETE",
			"data": [],
			"dataMode": "urlencoded",
			"tests": "tests[\"Status code is 200\"] = responseCode.code === 200;\n\nvar jsonData = JSON.parse(responseBody);\n\ntests[\"Success message\"] = responseBody.has(\"No such movie is found\");",
			"currentHelper": "normal",
			"helperAttributes": {},
			"time": 1491278981015,
			"name": "delete movie with title just deleted",
			"description": "should return the message \"movie doesn't exist\"",
			"collectionId": "29ba1136-d380-49d6-0899-6c5ee24e8e9a",
			"responses": []
		}
	]
}